import logging
import math
from binance import Client
from binance.exceptions import BinanceAPIException, BinanceRequestException
from typing import Optional, Union

TESTNET_BASE_URL = "https://testnet.binancefuture.com"
LOG_FILE = "trading_bot.log"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BasicBot:
    """
    A simplified trading bot for Binance Futures Testnet.
    Supports placing market, limit, and stop-limit orders.
    """

    def __init__(self, api_key: str, api_secret: str):
        try:
            self.client = Client(api_key, api_secret, base_url=TESTNET_BASE_URL)
            logger.info(f"Binance Client initialized for Testnet: {TESTNET_BASE_URL}")
            self.exchange_info = self._get_exchange_info()
            logger.info("Successfully fetched exchange information.")
        except Exception as e:
            logger.error(f"Failed to initialize Binance Client: {e}")
            raise

    def _log_message(self, level: str, message: str):
        if level == 'info':
            logger.info(message)
        elif level == 'warning':
            logger.warning(message)
        elif level == 'error':
            logger.error(message)
        elif level == 'debug':
            logger.debug(message)

    def _handle_api_error(self, e: Union[BinanceAPIException, BinanceRequestException], action: str):
        if isinstance(e, BinanceAPIException):
            self._log_message('error', f"Binance API Error during {action}: Code={e.code}, Message={e.message}")
        elif isinstance(e, BinanceRequestException):
            self._log_message('error', f"Binance Request Error during {action}: Message={e.message}")
        else:
            self._log_message('error', f"An unexpected error occurred during {action}: {e}")
        return None

    def _get_exchange_info(self):
        try:
            return self.client.futures_exchange_info()
        except (BinanceAPIException, BinanceRequestException) as e:
            return self._handle_api_error(e, "fetching exchange info")

    def _get_symbol_filters(self, symbol: str):
        if not self.exchange_info:
            logger.error("Exchange information not available. Cannot get symbol filters.")
            return None

        for s in self.exchange_info['symbols']:
            if s['symbol'] == symbol:
                filters = {f['filterType']: f for f in s['filters']}
                return filters
        logger.warning(f"Symbol '{symbol}' not found in exchange information.")
        return None

    def _apply_precision(self, value: float, step_size: str) -> float:
        if not step_size:
            return value

        if '.' in step_size:
            decimals = len(step_size.split('.')[1])
        else:
            decimals = 0

        format_string = f"%.{decimals}f"
        return float(format_string % value)

    def _validate_and_format_order_params(self, symbol: str, quantity: float, price: Optional[float] = None, stop_price: Optional[float] = None):
        filters = self._get_symbol_filters(symbol)
        if not filters:
            logger.error(f"Could not retrieve filters for symbol {symbol}. Cannot validate order parameters.")
            return None, None, None

        lot_size_filter = filters.get('LOT_SIZE')
        if lot_size_filter:
            min_qty = float(lot_size_filter['minQty'])
            max_qty = float(lot_size_filter['maxQty'])
            step_size = lot_size_filter['stepSize']

            if not (min_qty <= quantity <= max_qty):
                logger.error(f"Quantity {quantity} for {symbol} is out of range [{min_qty}, {max_qty}].")
                return None, None, None
            formatted_quantity = self._apply_precision(quantity, step_size)
            if formatted_quantity != quantity:
                logger.warning(f"Quantity adjusted from {quantity} to {formatted_quantity} for {symbol} precision.")
            quantity = formatted_quantity
        else:
            logger.warning(f"LOT_SIZE filter not found for {symbol}. Skipping quantity validation.")

        formatted_price = None
        if price is not None:
            price_filter = filters.get('PRICE_FILTER')
            if price_filter:
                min_price = float(price_filter['minPrice'])
                max_price = float(price_filter['maxPrice'])
                tick_size = price_filter['tickSize']

                if not (min_price <= price <= max_price):
                    logger.error(f"Price {price} for {symbol} is out of range [{min_price}, {max_price}].")
                    return None, None, None
                formatted_price = self._apply_precision(price, tick_size)
                if formatted_price != price:
                    logger.warning(f"Price adjusted from {price} to {formatted_price} for {symbol} precision.")
                price = formatted_price
            else:
                logger.warning(f"PRICE_FILTER not found for {symbol}. Skipping price validation.")
            formatted_price = price

        formatted_stop_price = None
        if stop_price is not None:
            price_filter = filters.get('PRICE_FILTER')
            if price_filter:
                min_price = float(price_filter['minPrice'])
                max_price = float(price_filter['maxPrice'])
                tick_size = price_filter['tickSize']

                if not (min_price <= stop_price <= max_price):
                    logger.error(f"Stop Price {stop_price} for {symbol} is out of range [{min_price}, {max_price}].")
                    return None, None, None
                formatted_stop_price = self._apply_precision(stop_price, tick_size)
                if formatted_stop_price != stop_price:
                    logger.warning(f"Stop Price adjusted from {stop_price} to {formatted_stop_price} for {symbol} precision.")
                stop_price = formatted_stop_price
            else:
                logger.warning(f"PRICE_FILTER not found for {symbol}. Skipping stop price validation.")
            formatted_stop_price = stop_price

        return quantity, formatted_price, formatted_stop_price

    def get_account_balance(self, asset: str = "USDT"):
        try:
            account_info = self.client.futures_account_balance()
            for balance in account_info:
                if balance['asset'] == asset:
                    available_balance = float(balance['availableBalance'])
                    logger.info(f"Available balance for {asset}: {available_balance}")
                    return available_balance
            logger.warning(f"Asset '{asset}' not found in account balance.")
            return None
        except (BinanceAPIException, BinanceRequestException) as e:
            return self._handle_api_error(e, f"getting account balance for {asset}")
        except Exception as e:
            self._log_message('error', f"An unexpected error occurred while getting account balance: {e}")
            return None

    def place_market_order(self, symbol: str, side: str, quantity: float):
        logger.info(f"Attempting to place MARKET {side} order for {quantity} {symbol}")
        quantity, _, _ = self._validate_and_format_order_params(symbol, quantity)
        if quantity is None:
            logger.error("Market order validation failed. Aborting.")
            return None

        try:
            order = self.client.futures_create_order(
                symbol=symbol,
                side=side,
                type='MARKET',
                quantity=quantity
            )
            self._log_message('info', f"MARKET order placed successfully: {order}")
            return order
        except (BinanceAPIException, BinanceRequestException) as e:
            return self._handle_api_error(e, "placing market order")
        except Exception as e:
            self._log_message('error', f"An unexpected error occurred while placing market order: {e}")
            return None

    def place_limit_order(self, symbol: str, side: str, quantity: float, price: float):
        logger.info(f"Attempting to place LIMIT {side} order for {quantity} {symbol} at price {price}")
        quantity, price, _ = self._validate_and_format_order_params(symbol, quantity, price=price)
        if quantity is None or price is None:
            logger.error("Limit order validation failed. Aborting.")
            return None

        try:
            order = self.client.futures_create_order(
                symbol=symbol,
                side=side,
                type='LIMIT',
                timeInForce='GTC',
                quantity=quantity,
                price=price
            )
            self._log_message('info', f"LIMIT order placed successfully: {order}")
            return order
        except (BinanceAPIException, BinanceRequestException) as e:
            return self._handle_api_error(e, "placing limit order")
        except Exception as e:
            self._log_message('error', f"An unexpected error occurred while placing limit order: {e}")
            return None

    def place_stop_limit_order(self, symbol: str, side: str, quantity: float, price: float, stop_price: float):
        logger.info(f"Attempting to place STOP_LIMIT {side} order for {quantity} {symbol} "
                    f"at limit price {price} with stop price {stop_price}")
        quantity, price, stop_price = self._validate_and_format_order_params(symbol, quantity, price=price, stop_price=stop_price)
        if quantity is None or price is None or stop_price is None:
            logger.error("Stop-Limit order validation failed. Aborting.")
            return None

        try:
            order = self.client.futures_create_order(
                symbol=symbol,
                side=side,
                type='STOP',
                timeInForce='GTC',
                quantity=quantity,
                price=price,
                stopPrice=stop_price,
            )
            self._log_message('info', f"STOP_LIMIT order placed successfully: {order}")
            return order
        except (BinanceAPIException, BinanceRequestException) as e:
            return self._handle_api_error(e, "placing stop-limit order")
        except Exception as e:
            self._log_message('error', f"An unexpected error occurred while placing stop-limit order: {e}")
            return None

def get_user_input(prompt: str, type_cast=str, validation_func=None):
    while True:
        user_input = input(prompt).strip()
        try:
            value = type_cast(user_input)
            if validation_func and not validation_func(value):
                print("Invalid input. Please try again.")
                continue
            return value
        except ValueError:
            print("Invalid input type. Please enter a valid value.")

def main():
    print("--- Binance Futures Testnet Trading Bot ---")
    print("Please ensure you have registered a Binance Testnet account and generated API credentials.")

    api_key = get_user_input("Enter your Binance Testnet API Key: ")
    api_secret = get_user_input("Enter your Binance Testnet API Secret: ")

    bot = None
    try:
        bot = BasicBot(api_key, api_secret)
    except Exception:
        print("Bot initialization failed. Exiting.")
        return

    bot.get_account_balance("USDT")

    while True:
        print("\n--- Select Order Type ---")
        print("1. Market Order")
        print("2. Limit Order")
        print("3. Stop-Limit Order (Bonus)")
        print("4. Exit")

        choice = get_user_input("Enter your choice (1-4): ", int, lambda x: 1 <= x <= 4)

        if choice == 4:
            print("Exiting bot. Goodbye!")
            break

        symbol = get_user_input("Enter symbol (e.g., BTCUSDT): ").upper()
        side = get_user_input("Enter side (BUY/SELL): ", str, lambda x: x in ['BUY', 'SELL']).upper()
        quantity = get_user_input("Enter quantity: ", float, lambda x: x > 0)

        order_result = None
        if choice == 1:
            order_result = bot.place_market_order(symbol, side, quantity)
        elif choice == 2:
            price = get_user_input("Enter limit price: ", float, lambda x: x > 0)
            order_result = bot.place_limit_order(symbol, side, quantity, price)
        elif choice == 3:
            price = get_user_input("Enter limit price (for Stop-Limit): ", float, lambda x: x > 0)
            stop_price = get_user_input("Enter stop price (trigger price): ", float, lambda x: x > 0)
            order_result = bot.place_stop_limit_order(symbol, side, quantity, price, stop_price)

        if order_result:
            print("\nOrder Details:")
            print(f"  Order ID: {order_result.get('orderId')}")
            print(f"  Symbol: {order_result.get('symbol')}")
            print(f"  Side: {order_result.get('side')}")
            print(f"  Type: {order_result.get('type')}")
            print(f"  Status: {order_result.get('status')}")
            print(f"  Executed Quantity: {order_result.get('executedQty')}")
            print(f"  Price: {order_result.get('price')}")
            print(f"  Client Order ID: {order_result.get('clientOrderId')}")
        else:
            print("\nOrder placement failed. Check logs for details.")

if __name__ == "__main__":
    main()
